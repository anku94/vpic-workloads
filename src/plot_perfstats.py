import argparse
import glob
import sys

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


def read_bincnt(perf_path: str) -> pd.Series:
    data = pd.read_csv(perf_path)
    col_type = data.columns[1]
    col_val = data.columns[2]
    # all_pivots = data[data[col_type] == 'RENEG_AGGR_PIVOTS']
    all_bincnts = data[data[col_type] == 'RENEG_BINCNT']
    return all_bincnts[col_val]


def merge_bincnt(all_stats: pd.Series) -> []:
    all_vals = lambda x: [
        np.array(rank_stat.values[x].strip().split(' '), dtype=int) for
        rank_stat
        in all_stats]
    v1 = all_vals(1)

    num_bincnts = len(all_stats[0])
    merged_bincnts = [sum(all_vals(i)) for i in range(num_bincnts)]
    print('Total Mass: {0}'.format(sum(merged_bincnts[-1])))
    return merged_bincnts


def plot_reneg_std(perf_path: str, fig_path: str) -> None:
    all_stats = sorted(glob.glob(perf_path + '/vpic-perfstats.log.*'))
    rank_stats = [read_bincnt(all_stats[r]) for r in range(len(all_stats))]
    merged_stats = merge_bincnt(rank_stats)

    data_x = []
    data_y = []

    load_prev = merged_stats[0]
    epoch = 0
    fig, ax = plt.subplots(1, 1)

    linestyle = '-'

    for stat in merged_stats[1:]:
        load_intvl = stat - load_prev
        load_prev = stat
        stat_x = sum(stat)
        sum_load_intvl = sum(load_intvl)
        if sum_load_intvl == 0:
            stat_y = 0
        else:
            stat_y = np.std(load_intvl) * 1.0 / sum(load_intvl)

        if stat_x < 100:
            ax.plot(data_x, data_y, linestyle, mec='purple', label='Epoch {0}'.format(epoch))
            epoch += 1
            data_x = []
            data_y = []

        data_x.append(stat_x)
        data_y.append(stat_y)

    ax.plot(data_x, data_y, linestyle, mec='purple', label='Epoch {0}'.format(epoch))
    ax.set_xlabel('Total Data Volume')
    ax.set_ylabel('Normalized Stddev')
    ax.set_title('Renegotiation Events vs Interval Stddev')
    ax.legend()
    plot_out = fig_path + '/reneg_vs_std.pdf'
    # fig.show()
    fig.savefig(plot_out, dpi=300)
    print('Plot saved: ', plot_out)


def run(perf_path: str, path_out: str) -> None:
    plot_reneg_std(perf_path, path_out)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='Manifest Plotter',
        description='''
        Plot manifest CSVs generated by the RDB reader''',
        epilog='''
        TBD
        '''
    )

    parser.add_argument('--input-path', '-i', type=str,
                        help='Path to perflog files', required=True)
    parser.add_argument('--output-path', '-o', type=str,
                        help='Destination for plotted graphs', required=True)

    options = parser.parse_args()
    if not options.input_path or not options.output_path:
        parser.print_help()
        sys.exit(0)

    run(options.input_path, options.output_path)
